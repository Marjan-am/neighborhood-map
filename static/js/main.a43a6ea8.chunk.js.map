{"version":3,"sources":["SearchBar.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","_this","this","react_default","a","createElement","className","type","placeholder","aria-label","onChange","e","props","updateQuery","target","value","Component","Navbar","_this$props","clickHandler","searchHanlder","src_SearchBar","venues","map","eachVenue","index","key","onClick","venue","name","tabIndex","App","state","markers","contents","query","notVisibleMarkers","originalVenues","mapLoader","url","window","document","getElementsByTagName","script","src","async","defer","parentNode","insertBefore","onerror","alert","scriptLoader","initMap","getVenues","axios","get","URLSearchParams","client_id","client_secret","near","limit","v","then","response","setState","data","groups","items","console","log","catch","error","createInfoWindow","infoWindow","google","maps","InfoWindow","createMap","Map","getElementById","center","lat","lng","zoom","createVenueContent","_v$venue","location","address","city","country","createVenueMarker","marker","Marker","position","animation","Animation","DROP","title","id","addListener","forEach","m","setMap","handleBounce","venueIndex","setAnimation","BOUNCE","setTimeout","_this$state","setContent","open","filterVenues","setVisible","match","RegExp","escapeRegExp","filter","myVenue","test","every","hasError","src_Navbar","filteredVenues","role","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a43a6ea8.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass SearchBar extends Component {  \n    render() {\n     \n        return (      \n            <form className=\"form-inline my-2 my-lg-0\">\n                <input className=\"form-control mr-sm-2\" \n                type=\"search\" placeholder=\"Search\"\n                 aria-label=\"Search\"\n                onChange={(e) => this.props.updateQuery(e.target.value)}\n                 />\n                <button className=\"btn btn-outline-secondary  my-2 my-sm-0\" type=\"submit\">Search</button>\n            </form>\n        )\n    }\n} \nexport default SearchBar;","import React, { Component } from 'react';\nimport SearchBar from './SearchBar';\n\nclass Navbar extends Component {  \n    \n    render() {     \n        const { clickHandler, searchHanlder, updateQuery} = this.props;\n        return (\n            <nav className=\"navbar-primary navbar-light bg-light\">\n                <SearchBar onChange={searchHanlder} updateQuery={updateQuery}/>\n              <ul className=\"navbar-primary-menu\">\n              \n                  {\n                    this.props.venues.map((eachVenue, index) => { \n                        return(\n                            <li\n                                key={index}\n                                onClick={() => clickHandler(index)}\n                                aria-label={eachVenue.venue.name}\n                                tabIndex=\"0\"\n                                >\n                                <span className=\"nav-label\">{eachVenue.venue.name}</span>\n                            </li> \n                        )\n                    })\n                 }\n               \n              </ul>\n            </nav>\n        );\n      }\n    }\n    \nexport default Navbar;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Navbar from \"./Navbar\";\nimport escapeRegExp from 'escape-string-regexp';\n\n\n\nclass App extends Component {\n\n  state =  {\n    venues: [],\n    markers: [],\n    contents: [],\n    query: '',\n    notVisibleMarkers: [],\n    originalVenues: []\n  }\n\n  componentDidMount () {\n    this.getVenues();\n  }\n\n  mapLoader = () => {\n    scriptLoader(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBTVFVjqLRQAvF8dRZwr6g-GadDHiXxkF8&callback=initMap\");\n    window.initMap = this.initMap\n  }\n\n    //Getting data from FourSquare by using axios\n\n  getVenues = () => {\n    const endPoint = \"https://api.foursquare.com/v2/venues/explore?\";\n    const parameters = {\n      client_id : \"GZMVVG2WEA2M3VVKAVGXTSMKACFFZLZHMUSVYBGKUTDBTI1M\",\n      client_secret: \"W5IKT542C1IOCMDMORI0YHDRIT2QLN2U4KT3E0ESWQ3XF3O4\",\n      near: \"Escondido\",\n      query: \"shops\",\n      limit: 8,\n      v: \"20181105\"\n    }\n\n    axios.get(endPoint + new URLSearchParams(parameters))\n      .then(response => {\n        this.setState({\n          //Storing all places in state array\n          venues: response.data.response.groups[0].items, \n          originalVenues: response.data.response.groups[0].items      \n          },  this.mapLoader())\n      // handle success\n            console.log(response);\n            \n         }).catch(error => {\n      // handle error\n          alert(`Fetching data from Foursquare was not possible!`)\n          console.log(\"Error! \" + error)\n        })\n  }\n  \n  createInfoWindow = () => {\n    this.infoWindow = new window.google.maps.InfoWindow();\n  }\n\n  createMap = () => {\n    this.map = new window.google.maps.Map(document.getElementById('map'), {\n      center: { lat:  33.133648, lng: -117.073223 },\n      zoom: 10\n    });\n  }\n\n  createVenueContent = (v, index) => {\n    const { location, name,} = v.venue;\n    var contentString = '<div id=\"content\">'+\n    '</div>'+\n    '<h3>'+ name +'</h3>'+\n    '<div id=\"bodyContent\">'+\n    '<p><b>Address: </b>'+ location.address +'</p>'+\n    '<p><b>City: </b>'+ location.city +'</p>'+\n    '<p><b>Country: </b>'+ location.country +'</p>'+\n    '</div>';\n\n    return contentString;\n  }\n\n  createVenueMarker = (v, index) => {\n    const marker = new window.google.maps.Marker({\n      position: { lat: v.venue.location.lat, lng: v.venue.location.lng },\n      animation: window.google.maps.Animation.DROP,\n      title: v.venue.name,\n      id: v.venue.id\n    });\n  \n    marker.addListener('click', () => {\n      this.clickHandler(index);\n    });\n\n    return marker;\n  }\n\n  initMap = () => {\n    const { venues } = this.state;\n\n    // Create map and store on the component instance variable\n    this.createMap();\n\n    // Creating the infoWindow and store the reference in instance variable\n    this.createInfoWindow();\n\n    // Markers\n    const markers = venues.map((eachVenue, index) => this.createVenueMarker(eachVenue, index));\n\n    // Contents\n    const contents = venues.map((eachVenue, index) => this.createVenueContent(eachVenue, index));\n\n    this.setState({\n      markers: markers,\n      contents: contents,\n    });\n\n    markers.forEach(m => m.setMap(this.map));\n\n  }  //End of initMap\n\n  handleBounce = (venueIndex) => {\n    const { markers } = this.state;\n    markers.map((m, index) => {\n      if (index === venueIndex) {\n        m.setAnimation(window.google.maps.Animation.BOUNCE);\n        setTimeout(function(){ m.setAnimation(null) }, 550)\n      } else {\n        m.setAnimation(null);\n      }\n    });\n  }\n\n  clickHandler = (venueIndex) => {\n    const { contents, markers } = this.state;\n    this.handleBounce(venueIndex);\n    this.infoWindow.setContent(contents[venueIndex]);\n    this.infoWindow.open(this.map, markers[venueIndex]);\n    \n  };\n\n  updateQuery = query => {\n    this.setState({ query })\n    this.state.markers.map(marker => marker.setVisible(true))\n    let filterVenues\n    let notVisibleMarkers\n\n    if (query) {\n      const match = new RegExp(escapeRegExp(query), \"i\")\n      filterVenues = this.state.venues.filter(myVenue =>\n        match.test(myVenue.venue.name)\n      )\n      this.setState({ venues: filterVenues })\n        notVisibleMarkers = this.state.markers.filter(marker =>\n        filterVenues.every(myVenue => myVenue.venue.name !== marker.title)\n      )\n\n      //Hiding the markers for venues \n   \n      notVisibleMarkers.forEach(marker => marker.setVisible(false))\n\n      this.setState({ notVisibleMarkers })\n    } else {\n      \n      this.setState({ venues: this.state.originalVenues})\n      this.state.markers.forEach(marker => marker.setVisible(true))\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <div id=\"Error-message\" aria-label=\"Error message\">Sorry, something went wrong!</div>\n    } else {\n\n        console.log(\"state \", this.state);\n        const { venues } = this.state;\n      \n        return (\n          <main className=\"container-fluid\"> \n          <Navbar         \n              updateQuery={this.updateQuery}\n              venues={venues}\n              filteredVenues={this.filteredVenues}\n              clickHandler={this.clickHandler} />\n            <div id=\"map\" role=\"application\" aria-label=\"Map\" ></div>\n          </main>\n     );\n    }\n  }\n}\n\nfunction scriptLoader (url) {\n  var index = window.document.getElementsByTagName(\"script\")[0]\n  var script = window.document.createElement(\"script\");\n  script.src = url;\n  script.async = true;\n  script.defer = true;\n  index.parentNode.insertBefore(script,index);\n  script.onerror = function() {\n    alert(\"Error loading map! Check the URL!\");\n  };\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}